<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-09-29T06:42:44.981Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Tool-生成雪碧图（sprite）</title>
    <link href="http://yoursite.com/2018/09/29/Tool-%E7%94%9F%E6%88%90%E9%9B%AA%E7%A2%A7%E5%9B%BE%EF%BC%88sprite%EF%BC%89/"/>
    <id>http://yoursite.com/2018/09/29/Tool-生成雪碧图（sprite）/</id>
    <published>2018-09-29T06:02:44.000Z</published>
    <updated>2018-09-29T06:42:44.981Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>网站开发时，我们会使用会多小图标，很多小图标的调用一直都是个问题。</p><h3 id="小图标使用方法"><a href="#小图标使用方法" class="headerlink" title="小图标使用方法"></a>小图标使用方法</h3><p>图标字体（例如:阿里出品的<a href="http://iconfont.cn/" target="_blank" rel="noopener">iconfont</a>）<br>雪碧图（CSS Sprite）<br>等等…</p><h3 id="雪碧图（CSS雪碧）"><a href="#雪碧图（CSS雪碧）" class="headerlink" title="雪碧图（CSS雪碧）"></a>雪碧图（CSS雪碧）</h3><p>CSS雪碧 即CSS Sprite，也有人叫它CSS精灵，是一种CSS图像合并技术，该方法是将小图标和背景图像合并到一张图片上，然后利用css的背景定位来显示需要显示的图片部分。</p><h3 id="雪碧图优点"><a href="#雪碧图优点" class="headerlink" title="雪碧图优点"></a>雪碧图优点</h3><p><strong> 1. 减少加载网页图片时对服务器的请求次数 </strong></p><p>可以合并多数背景图片和小图标，方便在任何位置使用，这样不同位置的请求只需要调用一个图片，从而减少对服务器的请求次数，降低服务器压力，同时提高了页面的加载速度，节约服务器的流量</p><p><strong> 2. 提高页面的加载速度 </strong></p><p>sprite 技术的其中一个好处是图片的加载时间(在有许多 sprite 时，单张图片的加载时间)；单独的一张 JPEG 或者 PNG sprite 在大小上非常可能比把一张图分成多张得来的图片总尺寸小。</p><h3 id="生成雪碧图"><a href="#生成雪碧图" class="headerlink" title="生成雪碧图"></a>生成雪碧图</h3><h4 id="PhotoShop（傻瓜方式）"><a href="#PhotoShop（傻瓜方式）" class="headerlink" title="PhotoShop（傻瓜方式）"></a>PhotoShop（傻瓜方式）</h4><p>通过PhotoShop把图片合成一张大图，让后手动写css，定位到图标</p><h4 id="Gulp生成雪碧图（项目链接）"><a href="#Gulp生成雪碧图（项目链接）" class="headerlink" title="Gulp生成雪碧图（项目链接）"></a>Gulp生成雪碧图（<a href="https://github.com/GoFighting/create-sprite-tool" target="_blank" rel="noopener">项目链接</a>）</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>);</span><br><span class="line"><span class="keyword">var</span> spritesmith = <span class="built_in">require</span>(<span class="string">'gulp.spritesmith'</span>);</span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">'sprite'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// var DEST_NAME = args[1];</span></span><br><span class="line">    <span class="keyword">var</span> spriteData = gulp.src(<span class="string">'src/sprite-images/*.png'</span>).pipe(spritesmith(&#123;</span><br><span class="line">        imgName: <span class="string">'sprite.png'</span>,</span><br><span class="line">      cssName: <span class="string">'sprite.css'</span>,</span><br><span class="line">      imgPath: <span class="string">'../images/sprite.png'</span>,</span><br><span class="line">      <span class="comment">// cssTemplate: 'sprite.template.handlebars'</span></span><br><span class="line">    &#125;));</span><br><span class="line">    spriteData.css.pipe(gulp.dest(<span class="string">'public/styles'</span>));</span><br><span class="line">    spriteData.img.pipe(gulp.dest(<span class="string">'public/images'</span>));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>合并前<br><img src="/img/bVbhEKv.png" alt="图片描述"></p><p>合并后<br><img src="/img/bVbhEL6.png" alt="图片描述"><br><img src="/img/bVbhEMP.png" alt="图片描述"></p><h4 id="Webpack生成雪碧图（项目链接）"><a href="#Webpack生成雪碧图（项目链接）" class="headerlink" title="Webpack生成雪碧图（项目链接）"></a>Webpack生成雪碧图（<a href="https://github.com/GoFighting/create-sprite-tool" target="_blank" rel="noopener">项目链接</a>）</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> SpritesmithPlugin = <span class="built_in">require</span>(<span class="string">'webpack-spritesmith'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">plugins: [</span><br><span class="line">        <span class="keyword">new</span> SpritesmithPlugin(&#123;</span><br><span class="line">            src: &#123;</span><br><span class="line">                cwd: <span class="string">'src/sprite-images'</span>,</span><br><span class="line">                glob: <span class="string">'*.png'</span></span><br><span class="line">            &#125;,</span><br><span class="line">            target: &#123;</span><br><span class="line">                image: <span class="string">'public/images/sprite.png'</span>,</span><br><span class="line">                css: <span class="string">'public/styles/sprite.css'</span></span><br><span class="line">            &#125;,</span><br><span class="line">            apiOptions: &#123;</span><br><span class="line">                cssImageRef: <span class="string">"../images/sprite.png"</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;网站开发时，我们会使用会多小图标，很多小图标的调用一直都是个问题。&lt;/p&gt;
&lt;h3 id=&quot;小图标使用方法&quot;&gt;&lt;a href=&quot;#小图标使用
      
    
    </summary>
    
      <category term="Tool" scheme="http://yoursite.com/categories/Tool/"/>
    
    
      <category term="Tool" scheme="http://yoursite.com/tags/Tool/"/>
    
  </entry>
  
  <entry>
    <title>Javascript-apply、call、bind</title>
    <link href="http://yoursite.com/2018/09/28/Javascript-apply%E3%80%81call%E3%80%81bind/"/>
    <id>http://yoursite.com/2018/09/28/Javascript-apply、call、bind/</id>
    <published>2018-09-28T02:17:44.000Z</published>
    <updated>2018-09-28T03:53:27.752Z</updated>
    
    <content type="html"><![CDATA[<h3 id="apply、call、bind的作用"><a href="#apply、call、bind的作用" class="headerlink" title="apply、call、bind的作用"></a>apply、call、bind的作用</h3><p>在javascript中，三者作用是改变某个函数的执行上下文（<a href="https://www.ecma-international.org/ecma-262/5.1/#sec-10.3" target="_blank" rel="noopener">Execution Context</a>），具体作用是改变函数体内部this的指向。</p><p>举个栗子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">example</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">example.prototype = &#123;</span><br><span class="line">    name: <span class="string">'will'</span>,</span><br><span class="line">    say: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'hi,'</span> + <span class="keyword">this</span>.name + <span class="string">'!'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> e = <span class="keyword">new</span> example()</span><br><span class="line">e.say() <span class="comment">// hi,will!</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    name: <span class="string">'lucky'</span></span><br><span class="line">&#125;</span><br><span class="line">e.say.apply(obj) <span class="comment">// hi,lucky! 此时this.name是lucky</span></span><br><span class="line">e.say.call(obj) <span class="comment">// hi,lucky! 此时this.name是lucky</span></span><br><span class="line">e.say.bind(obj)() <span class="comment">// hi,lucky! 此时this.name是lucky</span></span><br></pre></td></tr></table></figure><h3 id="apply、call、bind的区别"><a href="#apply、call、bind的区别" class="headerlink" title="apply、call、bind的区别"></a>apply、call、bind的区别</h3><p>apply、call只是接受参数的方式不太一样，而且会立即执行，bind会产生一个新函数，需要再次调用才会执行</p><p>举个栗子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func</span>(<span class="params">arg1, arg2</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(arg1 + arg2)</span><br><span class="line">&#125;</span><br><span class="line">func.apply(<span class="keyword">this</span>, [<span class="number">1</span>, <span class="number">2</span>]) <span class="comment">// apply接受的参数，第一个是对象，第二个是数组</span></span><br><span class="line">func.call(<span class="keyword">this</span>, <span class="number">1</span>, <span class="number">2</span>) <span class="comment">// call接受的参数，第一个是对象，后面一个接一个</span></span><br></pre></td></tr></table></figure><h3 id="简单举几个apply、call、bind的应用场景"><a href="#简单举几个apply、call、bind的应用场景" class="headerlink" title="简单举几个apply、call、bind的应用场景"></a>简单举几个apply、call、bind的应用场景</h3><h4 id="伪数组转标准数组"><a href="#伪数组转标准数组" class="headerlink" title="伪数组转标准数组"></a><a href="http://tongxu.tech/2018/09/27/Javascript-%E4%BC%AA%E6%95%B0%E7%BB%84/" target="_blank" rel="noopener">伪数组</a>转标准数组</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    <span class="number">0</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="number">1</span>: <span class="number">2</span>,</span><br><span class="line">    length: <span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> arr1 = <span class="built_in">Array</span>.prototype.slice.call(obj) <span class="comment">// [1, 2]</span></span><br><span class="line"><span class="keyword">var</span> arr2 = <span class="built_in">Array</span>.prototype.slice.apply(obj) <span class="comment">// [1, 2]</span></span><br></pre></td></tr></table></figure><h4 id="取数组中的最大值或者最小值"><a href="#取数组中的最大值或者最小值" class="headerlink" title="取数组中的最大值或者最小值"></a>取数组中的最大值或者最小值</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">//取最大值</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.max.apply(<span class="built_in">Math</span>, arr)) <span class="comment">// 4</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.max.call(<span class="built_in">Math</span>, ...arr)) <span class="comment">// 4</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//取最小值</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.min.apply(<span class="built_in">Math</span>, arr)) <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.min.call(<span class="built_in">Math</span>, ...arr)) <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><h4 id="检验是否是数组"><a href="#检验是否是数组" class="headerlink" title="检验是否是数组"></a>检验是否是数组</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isArray</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Object</span>.prototype.toString.call(obj) === <span class="string">'[object Array]'</span></span><br><span class="line">&#125;</span><br><span class="line">isArray([<span class="number">1</span>]) <span class="comment">// true</span></span><br><span class="line">isArray(&#123;&#125;) <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h4 id="React中使用bind使函数可以获取到props"><a href="#React中使用bind使函数可以获取到props" class="headerlink" title="React中使用bind使函数可以获取到props"></a>React中使用bind使函数可以获取到props</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyCircle</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">        <span class="keyword">super</span>(props)</span><br><span class="line">        <span class="keyword">this</span>.func = <span class="keyword">this</span>.func.bind(<span class="keyword">this</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    func() &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="等等…"><a href="#等等…" class="headerlink" title="等等…"></a>等等…</h4><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>三者作用都是改变函数this的指向<br>三者第一个传参都是要this要指向的对象<br>apply、call是立即执行函数，bind需要再次调用</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;apply、call、bind的作用&quot;&gt;&lt;a href=&quot;#apply、call、bind的作用&quot; class=&quot;headerlink&quot; title=&quot;apply、call、bind的作用&quot;&gt;&lt;/a&gt;apply、call、bind的作用&lt;/h3&gt;&lt;p&gt;在javas
      
    
    </summary>
    
      <category term="JavaScript" scheme="http://yoursite.com/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>Javascript-伪数组</title>
    <link href="http://yoursite.com/2018/09/27/Javascript-%E4%BC%AA%E6%95%B0%E7%BB%84/"/>
    <id>http://yoursite.com/2018/09/27/Javascript-伪数组/</id>
    <published>2018-09-27T06:34:27.000Z</published>
    <updated>2018-09-27T08:04:27.906Z</updated>
    
    <content type="html"><![CDATA[<h3 id="什么是伪数组"><a href="#什么是伪数组" class="headerlink" title="什么是伪数组"></a>什么是伪数组</h3><p>伪数组是一个含有length属性的json对象</p><p><strong> 例如：</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="number">0</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="number">1</span>: <span class="number">2</span>,</span><br><span class="line">    length: <span class="number">2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="常见的伪数组"><a href="#常见的伪数组" class="headerlink" title="常见的伪数组"></a>常见的伪数组</h3><p>arguments、NodeList、HTMLCollection、Jquery对象…</p><h3 id="伪数据如何转成标准数组"><a href="#伪数据如何转成标准数组" class="headerlink" title="伪数据如何转成标准数组"></a>伪数据如何转成标准数组</h3><p><strong> 使用Array.slice </strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">toArray</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">arguments</span> <span class="keyword">instanceof</span> <span class="built_in">Array</span>) <span class="comment">// false</span></span><br><span class="line">    <span class="built_in">arguments</span> = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">arguments</span> <span class="keyword">instanceof</span> <span class="built_in">Array</span>) <span class="comment">// true</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">arguments</span></span><br><span class="line">&#125;</span><br><span class="line">toArray(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>) <span class="comment">// [1, 2, 3]</span></span><br></pre></td></tr></table></figure></p><h3 id="Array-slice源码解析（587行）"><a href="#Array-slice源码解析（587行）" class="headerlink" title="Array.slice源码解析（587行）"></a><a href="https://github.com/v8/v8/blob/ad82a40509c5b5b4680d4299c8f08d6c6d31af3c/src/js/array.js" target="_blank" rel="noopener">Array.slice源码</a>解析（587行）</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ArraySlice</span>(<span class="params">start, end</span>) </span>&#123;</span><br><span class="line">    CHECK_OBJECT_COERCIBLE(<span class="keyword">this</span>, <span class="string">"Array.prototype.slice"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> array = TO_OBJECT(<span class="keyword">this</span>); </span><br><span class="line">    <span class="keyword">var</span> len = TO_LENGTH(array.length); <span class="comment">// 取数据length</span></span><br><span class="line">    <span class="keyword">var</span> start_i = TO_INTEGER(start); <span class="comment">// 开始值转Number</span></span><br><span class="line">    <span class="keyword">var</span> end_i = len; <span class="comment">// 结束值直接取array的length</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!IS_UNDEFINED(end)) end_i = TO_INTEGER(end); <span class="comment">// 参数有end则使用end</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (start_i &lt; <span class="number">0</span>) &#123; <span class="comment">// 开始值为负数，重新计算值，从尾部往前推算</span></span><br><span class="line">        start_i += len;</span><br><span class="line">        <span class="keyword">if</span> (start_i &lt; <span class="number">0</span>) start_i = <span class="number">0</span>; <span class="comment">// 负数的绝对值超过长度，开始值赋值为0</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (start_i &gt; len) start_i = len; <span class="comment">// 开始值超过长度, 开始值赋值为len</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (end_i &lt; <span class="number">0</span>) &#123; <span class="comment">// 结束值为负数，重新计算值，从尾部往前推算</span></span><br><span class="line">        end_i += len;</span><br><span class="line">        <span class="keyword">if</span> (end_i &lt; <span class="number">0</span>) end_i = <span class="number">0</span>; <span class="comment">// 负数的绝对值超过长度，结束值赋值为0</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (end_i &gt; len) end_i = len; <span class="comment">// 开始值超过长度, 结束值赋值为len</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> result = ArraySpeciesCreate(array, MaxSimple(end_i - start_i, <span class="number">0</span>)); <span class="comment">// 创建一个数组</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (end_i &lt; start_i) <span class="keyword">return</span> result; <span class="comment">// 结束值小于开始值，那么直接返回空数组</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (UseSparseVariant(array, len, IS_ARRAY(array), end_i - start_i)) &#123; <span class="comment">// array是数组</span></span><br><span class="line">        %NormalizeElements(array);</span><br><span class="line">        <span class="keyword">if</span> (IS_ARRAY(result)) %NormalizeElements(result);</span><br><span class="line">        SparseSlice(array, start_i, end_i - start_i, len, result);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123; <span class="comment">// array不是数组</span></span><br><span class="line">        SimpleSlice(array, start_i, end_i - start_i, len, result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    result.length = end_i - start_i;  <span class="comment">// 数组长度赋值</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* array 具体操作的数组</span></span><br><span class="line"><span class="comment">* start_i 开始位置</span></span><br><span class="line"><span class="comment">* del_count 需要处理的长度</span></span><br><span class="line"><span class="comment">* len 数组长度</span></span><br><span class="line"><span class="comment">* deleted_elements 利用浅拷贝，返回结果，对于slice来说，是选择的那部分数组，对于splice来说，是删除的那些数组</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SparseSlice</span>(<span class="params">array, start_i, del_count, len, deleted_elements</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// Move deleted elements to a new array (the return value from splice).</span></span><br><span class="line">    <span class="keyword">var</span> indices = %GetArrayKeys(array, start_i + del_count);</span><br><span class="line">    <span class="keyword">if</span> (IS_NUMBER(indices)) &#123;</span><br><span class="line">        <span class="keyword">var</span> limit = indices;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = start_i; i &lt; limit; ++i) &#123;</span><br><span class="line">            <span class="keyword">var</span> current = array[i];</span><br><span class="line">            <span class="keyword">if</span> (!IS_UNDEFINED(current) || i <span class="keyword">in</span> array) &#123;</span><br><span class="line">                %CreateDataProperty(deleted_elements, i - start_i, current);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> length = indices.length;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> k = <span class="number">0</span>; k &lt; length; ++k) &#123;</span><br><span class="line">            <span class="keyword">var</span> key = indices[k];</span><br><span class="line">            <span class="keyword">if</span> (key &gt;= start_i) &#123;</span><br><span class="line">                <span class="keyword">var</span> current = array[key];</span><br><span class="line">                <span class="keyword">if</span> (!IS_UNDEFINED(current) || key <span class="keyword">in</span> array) &#123;</span><br><span class="line">                    %CreateDataProperty(deleted_elements, key - start_i, current);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* array 具体操作的数组</span></span><br><span class="line"><span class="comment">* start_i 开始位置</span></span><br><span class="line"><span class="comment">* del_count 需要处理的长度</span></span><br><span class="line"><span class="comment">* len 数组长度</span></span><br><span class="line"><span class="comment">* deleted_elements 利用浅拷贝，返回结果，对于slice来说，是选择的那部分数组，对于splice来说，是删除的那些数组</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SimpleSlice</span>(<span class="params">array, start_i, del_count, len, deleted_elements</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; del_count; i++) &#123;</span><br><span class="line">        <span class="keyword">var</span> index = start_i + i;</span><br><span class="line">        <span class="keyword">if</span> (index <span class="keyword">in</span> array) &#123;</span><br><span class="line">            <span class="keyword">var</span> current = array[index];</span><br><span class="line">            %CreateDataProperty(deleted_elements, i, current);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;什么是伪数组&quot;&gt;&lt;a href=&quot;#什么是伪数组&quot; class=&quot;headerlink&quot; title=&quot;什么是伪数组&quot;&gt;&lt;/a&gt;什么是伪数组&lt;/h3&gt;&lt;p&gt;伪数组是一个含有length属性的json对象&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; 例如：&lt;/strong&gt;&lt;b
      
    
    </summary>
    
      <category term="JavaScript" scheme="http://yoursite.com/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>Javascript-JSON.parse与JSON.stringify的实现</title>
    <link href="http://yoursite.com/2018/09/11/JSON-parse%E4%B8%8EJSON-stringify%E7%9A%84%E5%AE%9E%E7%8E%B0/"/>
    <id>http://yoursite.com/2018/09/11/JSON-parse与JSON-stringify的实现/</id>
    <published>2018-09-11T08:09:37.000Z</published>
    <updated>2018-09-29T09:51:33.001Z</updated>
    
    <content type="html"><![CDATA[<h3 id="JSON-stringify"><a href="#JSON-stringify" class="headerlink" title="JSON.stringify"></a>JSON.stringify</h3><h4 id="简单实现"><a href="#简单实现" class="headerlink" title="简单实现"></a>简单实现</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">stringify</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> result = <span class="string">''</span>,</span><br><span class="line">        curVal;</span><br><span class="line">    <span class="keyword">if</span> (obj === <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">String</span>(obj);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">switch</span> (<span class="keyword">typeof</span> obj) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'number'</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'boolean'</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">String</span>(obj);</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'string'</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">'"'</span> + obj + <span class="string">'"'</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'undefined'</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'function'</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span> (<span class="built_in">Object</span>.prototype.toString.call(obj)) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'[object Array]'</span>:</span><br><span class="line">            result += <span class="string">'['</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = obj.length; i &lt; len; i++) &#123;</span><br><span class="line">                curVal = <span class="built_in">JSON</span>.stringify(obj[i]);</span><br><span class="line">                result += (curVal === <span class="literal">undefined</span> ? <span class="literal">null</span> : curVal) + <span class="string">','</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (result !== <span class="string">'['</span>) &#123;</span><br><span class="line">                result = result.slice(<span class="number">0</span>, <span class="number">-1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            result += <span class="string">']'</span>;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'[object Date]'</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">'"'</span> + (obj.toJSON ? obj.toJSON() : obj.toString()) + <span class="string">'"'</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'[object RegExp]'</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">'&#123;&#125;'</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'[object Object]'</span>:</span><br><span class="line">            result += <span class="string">'&#123;'</span>;</span><br><span class="line">            <span class="keyword">for</span> (i <span class="keyword">in</span> obj) &#123;</span><br><span class="line">                <span class="keyword">if</span> (obj.hasOwnProperty(i)) &#123;</span><br><span class="line">                    curVal = <span class="built_in">JSON</span>.stringify(obj[i]);</span><br><span class="line">                    <span class="keyword">if</span> (curVal !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">                        result += <span class="string">'"'</span> + i + <span class="string">'":'</span> + curVal + <span class="string">','</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (result !== <span class="string">'&#123;'</span>) &#123;</span><br><span class="line">                result = result.slice(<span class="number">0</span>, <span class="number">-1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            result += <span class="string">'&#125;'</span>;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> <span class="string">'[object String]'</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">'"'</span> + obj.toString() + <span class="string">'"'</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'[object Number]'</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'[object Boolean]'</span>:</span><br><span class="line">            <span class="keyword">return</span> obj.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="JSON-parse"><a href="#JSON-parse" class="headerlink" title="JSON.parse"></a>JSON.parse</h3><h4 id="简单实现1-通过eval"><a href="#简单实现1-通过eval" class="headerlink" title="简单实现1:通过eval"></a>简单实现1:通过eval</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">parse</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">eval</span>(<span class="string">'('</span> + str + <span class="string">')'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="简单实现2"><a href="#简单实现2" class="headerlink" title="简单实现2"></a>简单实现2</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">parse</span>(<span class="params">text</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> at = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">var</span> ch = <span class="string">' '</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> escapee = &#123;</span><br><span class="line">        <span class="string">'"'</span>: <span class="string">'"'</span>,</span><br><span class="line">        <span class="string">'\\'</span>: <span class="string">'\\'</span>,</span><br><span class="line">        <span class="string">'/'</span>: <span class="string">'/'</span>,</span><br><span class="line">        b: <span class="string">'\b'</span>,</span><br><span class="line">        f: <span class="string">'\f'</span>,</span><br><span class="line">        n: <span class="string">'\n'</span>,</span><br><span class="line">        r: <span class="string">'\r'</span>,</span><br><span class="line">        t: <span class="string">'\t'</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> error = <span class="function"><span class="keyword">function</span>(<span class="params">m</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> &#123;</span><br><span class="line">            name: <span class="string">'SyntaxError'</span>,</span><br><span class="line">            message: m,</span><br><span class="line">            at: at,</span><br><span class="line">            text: text</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> next = <span class="function"><span class="keyword">function</span>(<span class="params">c</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (c &amp;&amp; c !== ch) &#123;</span><br><span class="line">            error(<span class="string">"Expected '"</span> + c + <span class="string">"' instead of '"</span> + ch + <span class="string">"'"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        ch = text.charAt(at);</span><br><span class="line">        at = at + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ch;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> white = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (ch &amp;&amp; ch &lt;= <span class="string">' '</span>) &#123;</span><br><span class="line">            next();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> number = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> number;</span><br><span class="line">        <span class="keyword">var</span> string = <span class="string">''</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (ch === <span class="string">'-'</span>) &#123;</span><br><span class="line">            string = <span class="string">'-'</span>;</span><br><span class="line">            next(<span class="string">'-'</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>) &#123;</span><br><span class="line">            string += ch;</span><br><span class="line">            next();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (ch === <span class="string">'.'</span>) &#123;</span><br><span class="line">            string += <span class="string">'.'</span>;</span><br><span class="line">            <span class="keyword">while</span> (next() &amp;&amp; ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="number">9</span>) &#123;</span><br><span class="line">                string += ch;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (ch === <span class="string">'e'</span> || ch === <span class="string">'E'</span>) &#123;</span><br><span class="line">            string += ch;</span><br><span class="line">            next();</span><br><span class="line">            <span class="keyword">if</span> (ch === <span class="string">'-'</span> || ch === <span class="string">'+'</span>) &#123;</span><br><span class="line">                string += ch;</span><br><span class="line">                next();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span> (ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>) &#123;</span><br><span class="line">                string += ch;</span><br><span class="line">                next();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        number = string - <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">isFinite</span>(number)) &#123;</span><br><span class="line">            error(<span class="string">'Bad number'</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> number;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> string = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> hex;</span><br><span class="line">        <span class="keyword">var</span> i;</span><br><span class="line">        <span class="keyword">var</span> string = <span class="string">''</span>;</span><br><span class="line">        <span class="keyword">var</span> uffff;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (ch === <span class="string">'"'</span>) &#123;</span><br><span class="line">            <span class="keyword">while</span> (next()) &#123;</span><br><span class="line">                <span class="keyword">if</span> (ch === <span class="string">'"'</span>) &#123;</span><br><span class="line">                    next();</span><br><span class="line">                    <span class="keyword">return</span> string; <span class="comment">// 空字符串</span></span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (ch === <span class="string">'\\'</span>) &#123;</span><br><span class="line">                    next();</span><br><span class="line">                    <span class="keyword">if</span> (ch === <span class="string">'u'</span>) &#123;</span><br><span class="line">                        uffff = <span class="number">0</span>;</span><br><span class="line">                        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i += <span class="number">1</span>) &#123;</span><br><span class="line">                            hex = <span class="built_in">parseInt</span>(next(), <span class="number">16</span>);</span><br><span class="line">                            <span class="keyword">if</span> (!<span class="built_in">isFinite</span>(hex)) &#123;</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                            &#125;</span><br><span class="line"></span><br><span class="line">                            uffff = uffff * <span class="number">16</span> + hex;</span><br><span class="line">                        &#125;</span><br><span class="line">                        string += <span class="built_in">String</span>.fromCharCode(uffff);</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> escapee[ch] === <span class="string">'string'</span>) &#123;</span><br><span class="line">                        string += escapee[ch];</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    string += ch;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        error(<span class="string">'Bad string'</span>);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> word = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (ch) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'t'</span>:</span><br><span class="line">                next(<span class="string">'t'</span>);</span><br><span class="line">                next(<span class="string">'r'</span>);</span><br><span class="line">                next(<span class="string">'u'</span>);</span><br><span class="line">                next(<span class="string">'e'</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'f'</span>:</span><br><span class="line">                next(<span class="string">'f'</span>);</span><br><span class="line">                next(<span class="string">'a'</span>);</span><br><span class="line">                next(<span class="string">'l'</span>);</span><br><span class="line">                next(<span class="string">'s'</span>);</span><br><span class="line">                next(<span class="string">'e'</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'n'</span>:</span><br><span class="line">                next(<span class="string">'n'</span>);</span><br><span class="line">                next(<span class="string">'u'</span>);</span><br><span class="line">                next(<span class="string">'l'</span>);</span><br><span class="line">                next(<span class="string">'l'</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        error(<span class="string">"Unexpected '"</span> + ch + <span class="string">"'"</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">var</span> value;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> array = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> array = [];</span><br><span class="line">        <span class="keyword">if</span> (ch === <span class="string">'['</span>) &#123;</span><br><span class="line">            next(<span class="string">'['</span>);</span><br><span class="line">            white();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (ch === <span class="string">']'</span>) &#123;</span><br><span class="line">                next(<span class="string">']'</span>);</span><br><span class="line">                <span class="keyword">return</span> array; <span class="comment">// 空数组</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (ch) &#123;</span><br><span class="line">                array.push(value());</span><br><span class="line">                white();</span><br><span class="line">                <span class="keyword">if</span> (ch === <span class="string">']'</span>) &#123;</span><br><span class="line">                    next(<span class="string">']'</span>);</span><br><span class="line">                    <span class="keyword">return</span> array;</span><br><span class="line">                &#125;</span><br><span class="line">                next(<span class="string">','</span>);</span><br><span class="line">                white();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        error(<span class="string">'Bad array'</span>);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> object = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> key;</span><br><span class="line">        <span class="keyword">var</span> object = &#123;&#125;;</span><br><span class="line">        <span class="keyword">if</span> (ch === <span class="string">'&#123;'</span>) &#123;</span><br><span class="line">            next(<span class="string">'&#123;'</span>);</span><br><span class="line">            white();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (ch === <span class="string">'&#125;'</span>) &#123;</span><br><span class="line">                next(<span class="string">'&#125;'</span>);</span><br><span class="line">                <span class="keyword">return</span> object; <span class="comment">// 空对象</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (ch) &#123;</span><br><span class="line">                key = string();</span><br><span class="line">                white();</span><br><span class="line">                next(<span class="string">':'</span>);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">Object</span>.hasOwnProperty.call(object, key)) &#123;</span><br><span class="line">                    error(<span class="string">'Duplicate key "'</span> + key + <span class="string">'"'</span>);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                object[key] = value();</span><br><span class="line">                white();</span><br><span class="line">                <span class="keyword">if</span> (ch === <span class="string">'&#125;'</span>) &#123;</span><br><span class="line">                    next(<span class="string">'&#125;'</span>);</span><br><span class="line">                    <span class="keyword">return</span> object;</span><br><span class="line">                &#125;</span><br><span class="line">                next(<span class="string">','</span>);</span><br><span class="line">                white();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        error(<span class="string">'Bad object'</span>);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    value = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        white();</span><br><span class="line">        <span class="keyword">switch</span> (ch) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'&#123;'</span>:</span><br><span class="line">                <span class="keyword">return</span> object();</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'['</span>:</span><br><span class="line">                <span class="keyword">return</span> array();</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'"'</span>:</span><br><span class="line">                <span class="keyword">return</span> string();</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'-'</span>:</span><br><span class="line">                <span class="keyword">return</span> number();</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">return</span> ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span> ? number() : word();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> value(text);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://segmentfault.com/a/1190000016196021" target="_blank" rel="noopener">https://segmentfault.com/a/1190000016196021</a><br><a href="https://blog.csdn.net/wlx1991/article/details/50959618" target="_blank" rel="noopener">https://blog.csdn.net/wlx1991/article/details/50959618</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;JSON-stringify&quot;&gt;&lt;a href=&quot;#JSON-stringify&quot; class=&quot;headerlink&quot; title=&quot;JSON.stringify&quot;&gt;&lt;/a&gt;JSON.stringify&lt;/h3&gt;&lt;h4 id=&quot;简单实现&quot;&gt;&lt;a href=&quot;#简
      
    
    </summary>
    
      <category term="JavaScript" scheme="http://yoursite.com/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>Javascript-函数防抖与函数节流</title>
    <link href="http://yoursite.com/2018/09/06/%E5%87%BD%E6%95%B0%E9%98%B2%E6%8A%96%E4%B8%8E%E5%87%BD%E6%95%B0%E8%8A%82%E6%B5%81/"/>
    <id>http://yoursite.com/2018/09/06/函数防抖与函数节流/</id>
    <published>2018-09-06T07:44:06.000Z</published>
    <updated>2018-09-29T09:51:56.828Z</updated>
    
    <content type="html"><![CDATA[<h3 id="函数节流（throttle）"><a href="#函数节流（throttle）" class="headerlink" title="函数节流（throttle）"></a>函数节流（throttle）</h3><h4 id="名词解释"><a href="#名词解释" class="headerlink" title="名词解释"></a>名词解释</h4><p>函数节流（throttle）：连续执行函数，每隔一定时间执行函数</p><h4 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h4><p>鼠标移动，mousemove 事件<br>DOM 元素动态定位，window对象的resize和scroll 事件<br>等等…</p><h4 id="函数节流（throttle）简单实现"><a href="#函数节流（throttle）简单实现" class="headerlink" title="函数节流（throttle）简单实现"></a>函数节流（throttle）简单实现</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">throttle</span>(<span class="params">fn, delay</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> last; <span class="comment">// 上次执行的时间</span></span><br><span class="line">    <span class="keyword">var</span> timer; <span class="comment">// 定时器</span></span><br><span class="line">    delay || (delay = <span class="number">250</span>); <span class="comment">// 默认间隔为250ms</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> context = <span class="keyword">this</span>;</span><br><span class="line">        <span class="keyword">var</span> args = <span class="built_in">arguments</span>;</span><br><span class="line">        <span class="keyword">var</span> now = +<span class="keyword">new</span> <span class="built_in">Date</span>(); <span class="comment">// 现在的时间</span></span><br><span class="line">        <span class="keyword">if</span> (last &amp;&amp; now &lt; last + delay) &#123; <span class="comment">// 当前距离上次执行的时间小于设置的时间间隔</span></span><br><span class="line">            clearTimeout(timer); <span class="comment">// 清除定时器</span></span><br><span class="line">            timer = setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="comment">// delay时间后，执行函数</span></span><br><span class="line">                last = now;</span><br><span class="line">                fn.apply(context, args);</span><br><span class="line">            &#125;, delay);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; <span class="comment">// 当前距离上次执行的时间大于等于设置的时间，直接执行函数</span></span><br><span class="line">            last = now;</span><br><span class="line">            fn.apply(context, args);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="函数防抖（debounce）"><a href="#函数防抖（debounce）" class="headerlink" title="函数防抖（debounce）"></a>函数防抖（debounce）</h3><h4 id="名词解释-1"><a href="#名词解释-1" class="headerlink" title="名词解释"></a>名词解释</h4><p>函数防抖（debounce）：空闲时间必须大于或等于一定值的时候，才会执行调用方法</p><h4 id="使用场景-1"><a href="#使用场景-1" class="headerlink" title="使用场景"></a>使用场景</h4><p>文本输入keydown 事件<br>等等…</p><h4 id="函数防抖（debounce）简单实现"><a href="#函数防抖（debounce）简单实现" class="headerlink" title="函数防抖（debounce）简单实现"></a>函数防抖（debounce）简单实现</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">debounce</span>(<span class="params">fn, delay</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> timer; <span class="comment">// 定时器</span></span><br><span class="line">    delay || (delay = <span class="number">250</span>); <span class="comment">// 默认空闲时间250ms</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> context = <span class="keyword">this</span>;</span><br><span class="line">        <span class="keyword">var</span> args = <span class="built_in">arguments</span>;</span><br><span class="line">        clearTimeout(timer); <span class="comment">// 清除定时器</span></span><br><span class="line">        timer = setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="comment">// delay时间后，执行函数</span></span><br><span class="line">            fn.apply(context, args);</span><br><span class="line">        &#125;, delay);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;函数节流（throttle）&quot;&gt;&lt;a href=&quot;#函数节流（throttle）&quot; class=&quot;headerlink&quot; title=&quot;函数节流（throttle）&quot;&gt;&lt;/a&gt;函数节流（throttle）&lt;/h3&gt;&lt;h4 id=&quot;名词解释&quot;&gt;&lt;a href=&quot;#名
      
    
    </summary>
    
      <category term="JavaScript" scheme="http://yoursite.com/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>Javascript-深浅拷贝</title>
    <link href="http://yoursite.com/2018/08/16/%E6%B7%B1%E6%B5%85%E6%8B%B7%E8%B4%9D/"/>
    <id>http://yoursite.com/2018/08/16/深浅拷贝/</id>
    <published>2018-08-16T06:01:04.000Z</published>
    <updated>2018-09-29T09:52:00.257Z</updated>
    
    <content type="html"><![CDATA[<h2 id="深浅拷贝简介"><a href="#深浅拷贝简介" class="headerlink" title="深浅拷贝简介"></a>深浅拷贝简介</h2><p>javascript中对于Object和Array这两个类型，把一个变量赋值给另一个变量；浅拷贝只是对拷贝对象的引用，深拷贝是彻底拷贝，生成一个新的属性相同的对象</p><h2 id="浅拷贝（shallow-copy）"><a href="#浅拷贝（shallow-copy）" class="headerlink" title="浅拷贝（shallow copy）"></a>浅拷贝（shallow copy）</h2><p><strong> 浅拷贝只是对拷贝对的引用，两者相互影响 </strong></p><h3 id="浅拷贝的实现"><a href="#浅拷贝的实现" class="headerlink" title="浅拷贝的实现"></a>浅拷贝的实现</h3><h4 id="1-简单赋值实现"><a href="#1-简单赋值实现" class="headerlink" title="1.简单赋值实现"></a>1.简单赋值实现</h4><p>例子：obj2拷贝了obj1，obj2改变，obj1也会改变，改变之后2者还是相同的<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj1 = &#123;<span class="attr">a</span>: <span class="number">1</span>&#125;</span><br><span class="line"><span class="keyword">var</span> obj2 = obj1</span><br><span class="line">obj2.b = <span class="number">2</span></span><br><span class="line"><span class="built_in">console</span>.log(obj1) <span class="comment">// &#123;a: 1, b: 2&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(obj2) <span class="comment">//&#123;a: 1, b: 2&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(obj1 == obj2) <span class="comment">// true</span></span><br></pre></td></tr></table></figure></p><h4 id="Object-assign-实现"><a href="#Object-assign-实现" class="headerlink" title="Object.assign()实现"></a>Object.assign()实现</h4><p>例子：当第一个传参是你需要拷贝的对象（PS：Object.assign()也可以实现深拷贝）<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj1 = &#123;<span class="attr">a</span>: <span class="number">1</span>&#125;</span><br><span class="line"><span class="keyword">var</span> obj2 = <span class="built_in">Object</span>.assign(obj1)</span><br><span class="line">obj2.b = <span class="number">2</span></span><br><span class="line"><span class="built_in">console</span>.log(obj1) <span class="comment">// &#123;a: 1, b: 2&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(obj2) <span class="comment">// &#123;a: 1, b: 2&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(obj1 == obj2) <span class="comment">// true</span></span><br></pre></td></tr></table></figure></p><h2 id="深拷贝（deep-copy）"><a href="#深拷贝（deep-copy）" class="headerlink" title="深拷贝（deep copy）"></a>深拷贝（deep copy）</h2><p><strong> 彻底拷贝，生成一个新的属性相同的对象 </strong></p><h3 id="深拷贝的实现"><a href="#深拷贝的实现" class="headerlink" title="深拷贝的实现"></a>深拷贝的实现</h3><h4 id="Object-assign-实现-1"><a href="#Object-assign-实现-1" class="headerlink" title="Object.assign()实现"></a>Object.assign()实现</h4><p>例子：拷贝对象不是第一个传参<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj1 = &#123;<span class="attr">a</span>: <span class="number">1</span>&#125;</span><br><span class="line"><span class="keyword">var</span> obj2 = <span class="built_in">Object</span>.assign(&#123;&#125;, obj1)</span><br><span class="line">obj2.b = <span class="number">2</span></span><br><span class="line"><span class="built_in">console</span>.log(obj1) <span class="comment">// &#123;a: 1&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(obj2) <span class="comment">// &#123;a: 1, b: 2&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(obj1 == obj2) <span class="comment">// false</span></span><br></pre></td></tr></table></figure></p><h4 id="Array-slice-可以实现数组的深拷贝（数组中不能有Object和Array，Object和Array只是浅拷贝）"><a href="#Array-slice-可以实现数组的深拷贝（数组中不能有Object和Array，Object和Array只是浅拷贝）" class="headerlink" title="Array.slice()可以实现数组的深拷贝（数组中不能有Object和Array，Object和Array只是浅拷贝）"></a>Array.slice()可以实现数组的深拷贝（数组中不能有Object和Array，Object和Array只是浅拷贝）</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr1 = [<span class="number">1</span>, [<span class="number">2</span>]]</span><br><span class="line"><span class="keyword">var</span> arr2 = arr1.slice()</span><br><span class="line">arr2[<span class="number">1</span>].push(<span class="number">3</span>)</span><br><span class="line">arr2.push(<span class="number">4</span>)</span><br><span class="line"><span class="built_in">console</span>.log(arr1) <span class="comment">// [1, [2, 3]]</span></span><br><span class="line"><span class="built_in">console</span>.log(arr2) <span class="comment">// [1, [2, 3], 4]</span></span><br><span class="line"><span class="built_in">console</span>.log(arr1 == arr2) <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h4 id="JSON-stringify-和JSON-parse-实现"><a href="#JSON-stringify-和JSON-parse-实现" class="headerlink" title="JSON.stringify()和JSON.parse()实现"></a>JSON.stringify()和JSON.parse()实现</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj1 = &#123;<span class="attr">a</span>: <span class="number">1</span>&#125;</span><br><span class="line"><span class="keyword">var</span> obj2 = <span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(obj1))</span><br><span class="line"><span class="built_in">console</span>.log(obj1 == obj2) <span class="comment">// false</span></span><br><span class="line">obj2.b = <span class="number">2</span></span><br><span class="line"><span class="built_in">console</span>.log(obj1) <span class="comment">// &#123;a: 1&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(obj2) <span class="comment">// &#123;a: 1, b: 2&#125;</span></span><br></pre></td></tr></table></figure><h4 id="递归实现"><a href="#递归实现" class="headerlink" title="递归实现"></a>递归实现</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> deepCopy = <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> obj !== <span class="string">'object'</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">var</span> newObj = obj <span class="keyword">instanceof</span> <span class="built_in">Array</span> ? [] : &#123;&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> obj) &#123;</span><br><span class="line">        <span class="keyword">if</span> (obj.hasOwnProperty(key)) &#123;</span><br><span class="line">            newObj[key] = <span class="keyword">typeof</span> obj[key] === <span class="string">'object'</span> ? deepCopy(obj[key]) : obj[key];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> newObj;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj1 = &#123;<span class="attr">a</span>: <span class="number">1</span>&#125;</span><br><span class="line"><span class="keyword">var</span> obj2 = deepCopy(obj1)</span><br><span class="line"><span class="built_in">console</span>.log(obj1 == obj2) <span class="comment">// false</span></span><br><span class="line">obj2.b = <span class="number">2</span></span><br><span class="line"><span class="built_in">console</span>.log(obj1) <span class="comment">// &#123;a: 1&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(obj2) <span class="comment">// &#123;a: 1, b: 2&#125;</span></span><br></pre></td></tr></table></figure><h4 id="Object-create-实现"><a href="#Object-create-实现" class="headerlink" title="Object.create()实现"></a>Object.create()实现</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> deepCopy = <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> obj !== <span class="string">'object'</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">var</span> newObj = obj <span class="keyword">instanceof</span> <span class="built_in">Array</span> ? [] : &#123;&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> obj) &#123;</span><br><span class="line">        <span class="keyword">if</span> (obj.hasOwnProperty(key)) &#123;</span><br><span class="line">            newObj[key] = <span class="keyword">typeof</span> obj[key] === <span class="string">'object'</span> ? <span class="built_in">Object</span>.create(obj[key]) : obj[key];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> newObj;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj1 = &#123;<span class="attr">a</span>: <span class="number">1</span>&#125;</span><br><span class="line"><span class="keyword">var</span> obj2 = deepCopy(obj1)</span><br><span class="line"><span class="built_in">console</span>.log(obj1 == obj2) <span class="comment">// false</span></span><br><span class="line">obj2.b = <span class="number">2</span></span><br><span class="line"><span class="built_in">console</span>.log(obj1) <span class="comment">// &#123;a: 1&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(obj2) <span class="comment">// &#123;a: 1, b: 2&#125;</span></span><br></pre></td></tr></table></figure><h4 id="jQuery-extend-实现"><a href="#jQuery-extend-实现" class="headerlink" title="jQuery.extend()实现"></a>jQuery.extend()实现</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj1 = &#123;<span class="attr">a</span>: <span class="number">1</span>&#125;</span><br><span class="line"><span class="keyword">var</span> obj2 = $.extend(<span class="literal">true</span>, &#123;&#125;, obj1)</span><br><span class="line"><span class="built_in">console</span>.log(obj1 == obj2) <span class="comment">// false</span></span><br><span class="line">obj2.b = <span class="number">2</span></span><br><span class="line"><span class="built_in">console</span>.log(obj1) <span class="comment">// &#123;a: 1&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(obj2) <span class="comment">// &#123;a: 1, b: 2&#125;</span></span><br></pre></td></tr></table></figure><p><strong> jQuery.extend()源码 </strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">jQuery.extend = jQuery.fn.extend = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> src, copyIsArray, copy, name, options, clone,</span><br><span class="line">        target = <span class="built_in">arguments</span>[<span class="number">0</span>] || &#123;&#125;, <span class="comment">// 默认取第一个参数赋值给target</span></span><br><span class="line">        i = <span class="number">1</span>,</span><br><span class="line">        length = <span class="built_in">arguments</span>.length, <span class="comment">// 获取参数的个数</span></span><br><span class="line">        deep = <span class="literal">false</span>; <span class="comment">// 默认浅拷贝</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Handle a deep copy situation</span></span><br><span class="line">    <span class="keyword">if</span> ( <span class="keyword">typeof</span> target === <span class="string">"boolean"</span> ) &#123; <span class="comment">// 如果第一个参数类型为boolean，那么把该参数赋值给局部变量deep</span></span><br><span class="line">        deep = target;  </span><br><span class="line">        target = <span class="built_in">arguments</span>[<span class="number">1</span>] || &#123;&#125;; <span class="comment">// 把第二个参数赋值给target</span></span><br><span class="line">        <span class="comment">// skip the boolean and the target</span></span><br><span class="line">        i = <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Handle case when target is a string or something (possible in deep copy)</span></span><br><span class="line">    <span class="keyword">if</span> ( <span class="keyword">typeof</span> target !== <span class="string">"object"</span> &amp;&amp; !jQuery.isFunction(target) ) &#123; <span class="comment">// target不是object类型或者不是function，就赋值&#123;&#125;</span></span><br><span class="line">        target = &#123;&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// extend jQuery itself if only one argument is passed</span></span><br><span class="line">    <span class="keyword">if</span> ( length === i ) &#123; <span class="comment">// 如果只有一个参数，这时候i就是1，length也就是1，那么把target设置为调用者，也就是jQuery对象本身!同时把i递减为0</span></span><br><span class="line">        target = <span class="keyword">this</span>; <span class="comment">// this就是jQuery</span></span><br><span class="line">        --i;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> ( ; i &lt; length; i++ ) &#123; <span class="comment">// 循环参数</span></span><br><span class="line">        <span class="comment">// Only deal with non-null/undefined values</span></span><br><span class="line">        <span class="keyword">if</span> ( (options = <span class="built_in">arguments</span>[ i ]) != <span class="literal">null</span> ) &#123;</span><br><span class="line">            <span class="comment">// Extend the base object</span></span><br><span class="line">            <span class="keyword">for</span> ( name <span class="keyword">in</span> options ) &#123;</span><br><span class="line">                src = target[ name ]; </span><br><span class="line">                copy = options[ name ];</span><br><span class="line"></span><br><span class="line">                <span class="comment">// Prevent never-ending loop</span></span><br><span class="line">                <span class="keyword">if</span> ( target === copy ) &#123; <span class="comment">// 防止无休止循环</span></span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// Recurse if we're merging plain objects or arrays</span></span><br><span class="line">                <span class="comment">// deep是否深拷贝，copy是参数属性值</span></span><br><span class="line">                <span class="keyword">if</span> ( deep &amp;&amp; copy &amp;&amp; ( jQuery.isPlainObject(copy) || (copyIsArray = jQuery.isArray(copy)) ) ) &#123;</span><br><span class="line">                    <span class="keyword">if</span> ( copyIsArray ) &#123; <span class="comment">// 被拷贝的属性值是数组</span></span><br><span class="line">                        copyIsArray = <span class="literal">false</span>;</span><br><span class="line">                        clone = src &amp;&amp; jQuery.isArray(src) ? src : [];</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123; <span class="comment">// 不是数组</span></span><br><span class="line">                        clone = src &amp;&amp; jQuery.isPlainObject(src) ? src : &#123;&#125;;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// Never move original objects, clone them</span></span><br><span class="line">                    target[ name ] = jQuery.extend( deep, clone, copy );  <span class="comment">// 递归~</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">// Don't bring in undefined values</span></span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> ( copy !== <span class="literal">undefined</span> ) &#123;  <span class="comment">// 浅拷贝，且属性值不为undefined</span></span><br><span class="line">                    target[ name ] = copy;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Return the modified object</span></span><br><span class="line">    <span class="keyword">return</span> target;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h4 id="更多方法…敬请期待"><a href="#更多方法…敬请期待" class="headerlink" title="更多方法…敬请期待"></a>更多方法…敬请期待</h4>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;深浅拷贝简介&quot;&gt;&lt;a href=&quot;#深浅拷贝简介&quot; class=&quot;headerlink&quot; title=&quot;深浅拷贝简介&quot;&gt;&lt;/a&gt;深浅拷贝简介&lt;/h2&gt;&lt;p&gt;javascript中对于Object和Array这两个类型，把一个变量赋值给另一个变量；浅拷贝只是对拷贝对
      
    
    </summary>
    
      <category term="JavaScript" scheme="http://yoursite.com/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>React-JSX模板优化-标签化</title>
    <link href="http://yoursite.com/2018/06/20/React%E4%BC%98%E5%8C%96-JSX%E6%A8%A1%E6%9D%BF%E4%BC%98%E5%8C%96-%E6%A0%87%E7%AD%BE%E5%8C%96/"/>
    <id>http://yoursite.com/2018/06/20/React优化-JSX模板优化-标签化/</id>
    <published>2018-06-20T03:31:43.000Z</published>
    <updated>2018-09-29T09:52:39.590Z</updated>
    
    <content type="html"><![CDATA[<h3 id="什么是JSX"><a href="#什么是JSX" class="headerlink" title="什么是JSX"></a>什么是JSX</h3><p>JSX是JavaScrip的一种扩展语法，JSX的标签语法既不是字符串也不是HTML；<br>从本质上讲，JSX只是为React.createElement(component, props, …children)函数提供的语法糖。</p><h3 id="JSX的痛点（项目开发中遇到的）"><a href="#JSX的痛点（项目开发中遇到的）" class="headerlink" title="JSX的痛点（项目开发中遇到的）"></a>JSX的痛点（项目开发中遇到的）</h3><p>写jsx模板的时候，我们遇到循环输出子组件或者标签，需要通过Array.forEach或者for循环输出；判断选择子组件的时候，需要通过if或者三元判断输出；一个模板里面我们会很多逻辑，这些逻辑看起来跟jsx不是很和谐！有没有办法做到标签化，跟jsx语法一致尼？</p><h3 id="jsx-control-statements介绍"><a href="#jsx-control-statements介绍" class="headerlink" title="jsx-control-statements介绍"></a>jsx-control-statements介绍</h3><p>安装<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev babel-plugin-jsx-control-statements</span><br></pre></td></tr></table></figure></p><p>配置<strong>.babelrc</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="string">"plugins"</span>: [<span class="string">"jsx-control-statements"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="jsx-control-statements语法"><a href="#jsx-control-statements语法" class="headerlink" title="jsx-control-statements语法"></a>jsx-control-statements语法</h3><p><strong>If（但是目前不支持Else，这也是可惜的）</strong><br>    // 简单例子<br>    <if condition="{" true="" }=""><br>      <span>IfBlock</span><br>    </if></p><pre><code>// 使用多个子元素或者表达式&lt;If condition={ true }&gt;  one  { &quot;two&quot; }  &lt;span&gt;three&lt;/span&gt;  &lt;span&gt;four&lt;/span&gt;&lt;/If&gt;// 转化前&lt;If condition={ test }&gt;  &lt;span&gt;Truth&lt;/span&gt;&lt;/If&gt;// 转化后{ test ? &lt;span&gt;Truth&lt;/span&gt; : null }</code></pre><p><strong>Choose、When、Otherwise（ 相当于switch case defualt）</strong></p><pre><code>// 转化前&lt;Choose&gt;  &lt;When condition={ test1 }&gt;    &lt;span&gt;IfBlock1&lt;/span&gt;  &lt;/When&gt;  &lt;When condition={ test2 }&gt;    &lt;span&gt;IfBlock2&lt;/span&gt;  &lt;/When&gt;  &lt;Otherwise&gt;    &lt;span&gt;ElseBlock&lt;/span&gt;  &lt;/Otherwise&gt;&lt;/Choose&gt;// 转化后{ test1 ? &lt;span&gt;IfBlock1&lt;/span&gt; : test2 ? &lt;span&gt;IfBlock2&lt;/span&gt; : &lt;span&gt;ElseBlock&lt;/span&gt; }</code></pre><p><strong>For</strong><br>    // 循环输出的时候必须提供key<br>    <for each="item" of="{" this.props.items="" }=""><br>        <span key="{" item.id="" }="">{ item.title }</span><br>    </for></p><pre><code>// 如果数组改变，则使用索引作为键属性是不稳定的&lt;For each=&quot;item&quot; index=&quot;idx&quot; of={ [1,2,3] }&gt;    &lt;span key={ idx }&gt;{ item }&lt;/span&gt;    &lt;span key={ idx + &apos;_2&apos; }&gt;Static Text&lt;/span&gt;&lt;/For&gt;</code></pre><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://github.com/AlexGilleran/jsx-control-statements" target="_blank" rel="noopener">https://github.com/AlexGilleran/jsx-control-statements</a><br><a href="http://www.css88.com/react/docs/introducing-jsx.html" target="_blank" rel="noopener">JSX 介绍</a><br><a href="http://www.css88.com/react/docs/jsx-in-depth.html" target="_blank" rel="noopener">JSX 深入</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;什么是JSX&quot;&gt;&lt;a href=&quot;#什么是JSX&quot; class=&quot;headerlink&quot; title=&quot;什么是JSX&quot;&gt;&lt;/a&gt;什么是JSX&lt;/h3&gt;&lt;p&gt;JSX是JavaScrip的一种扩展语法，JSX的标签语法既不是字符串也不是HTML；&lt;br&gt;从本质上讲，J
      
    
    </summary>
    
      <category term="React" scheme="http://yoursite.com/categories/React/"/>
    
    
      <category term="React" scheme="http://yoursite.com/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>React-记忆化技术-提升你的React性能</title>
    <link href="http://yoursite.com/2018/06/15/React%E4%BC%98%E5%8C%96-%E8%AE%B0%E5%BF%86%E5%8C%96%E6%8A%80%E6%9C%AF-%E6%8F%90%E5%8D%87%E4%BD%A0%E7%9A%84React%E6%80%A7%E8%83%BD/"/>
    <id>http://yoursite.com/2018/06/15/React优化-记忆化技术-提升你的React性能/</id>
    <published>2018-06-15T06:14:31.000Z</published>
    <updated>2018-09-29T09:52:35.047Z</updated>
    
    <content type="html"><![CDATA[<h4 id="为什么要使用记忆性技术？"><a href="#为什么要使用记忆性技术？" class="headerlink" title="为什么要使用记忆性技术？"></a>为什么要使用记忆性技术？</h4><p>使用React开发的时候，我们请求服务器拿回来一个复杂的数据，我们在render里去处理这个数据，但是state和props频繁修改会触发render，每次触发render，数据都要去处理一次，每次处理都是对性能的损耗</p><p><strong>举个例子：把大于18岁的人列出来</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Example</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123; dataList &#125; = <span class="keyword">this</span>.props;</span><br><span class="line">        <span class="keyword">const</span> newDataList = dataList.filter(<span class="function">(<span class="params">item</span>) =&gt;</span> item.age &gt; <span class="number">18</span>);</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &#123;newDataList.map(<span class="function">(<span class="params">item, i</span>) =&gt;</span></span><br><span class="line">                    &lt;p key=&#123;i&#125;&gt;&#123;item.name&#125;:&#123;item.age&#125;岁&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">                )&#125;</span></span><br><span class="line"><span class="regexp">            &lt;/</span>div&gt;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>从例子中我们看到render中我们处理数据，但是每次state和props的修改都会触发render，都会去处理数据dataList，生成新的数据newDataList，每次处理都是对性能的损耗！</p><h4 id="什么叫记忆性技术？"><a href="#什么叫记忆性技术？" class="headerlink" title="什么叫记忆性技术？"></a>什么叫记忆性技术？</h4><p>每次调用函数把你的传参和结果记录下来，遇到相同的传参，就直接返回记录缓存的结果，不用再去调用函数处理数据！</p><h4 id="memoize-one官方案例"><a href="#memoize-one官方案例" class="headerlink" title="memoize-one官方案例"></a>memoize-one官方案例</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> memoizeOne <span class="keyword">from</span> <span class="string">'memoize-one'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> add = <span class="function">(<span class="params">a, b</span>) =&gt;</span> a + b;</span><br><span class="line"><span class="keyword">const</span> memoizedAdd = memoizeOne(add);</span><br><span class="line"></span><br><span class="line">memoizedAdd(<span class="number">1</span>, <span class="number">2</span>); <span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line">memoizedAdd(<span class="number">1</span>, <span class="number">2</span>); <span class="comment">// 3</span></span><br><span class="line"><span class="comment">// Add 函数并没有执行: 前一次执行的结果被返回</span></span><br><span class="line"></span><br><span class="line">memoizedAdd(<span class="number">2</span>, <span class="number">3</span>); <span class="comment">// 5</span></span><br><span class="line"><span class="comment">// Add 函数再次被调用，返回一个新的结果</span></span><br><span class="line"></span><br><span class="line">memoizedAdd(<span class="number">2</span>, <span class="number">3</span>); <span class="comment">// 5</span></span><br><span class="line"><span class="comment">// Add 函数并没有执行: 前一次执行的结果被返回</span></span><br><span class="line"></span><br><span class="line">memoizedAdd(<span class="number">1</span>, <span class="number">2</span>); <span class="comment">// 3</span></span><br><span class="line"><span class="comment">// Add 函数再次被调用，返回一个新的结果</span></span><br></pre></td></tr></table></figure><p>我们可以发现连续两次相同传参，第二次会直接返回上次的结果，每次传参不一样，就直接调用函数返回新的结果，会丢失之前的记录，并不是完全记忆，这也是个不足点！</p><h4 id="在React中使用memoize-one"><a href="#在React中使用memoize-one" class="headerlink" title="在React中使用memoize-one"></a>在React中使用memoize-one</h4><p>根据上的例子，我们对那个例子进行修改，使用memoize-one提升React的性能<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> memoize <span class="keyword">from</span> <span class="string">"memoize-one"</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Example</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    filter = memoize(<span class="function">(<span class="params">dataList, age</span>) =&gt;</span> dataList.filter(<span class="function">(<span class="params">item</span>) =&gt;</span> item.age &gt; age))</span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123; dataList &#125; = <span class="keyword">this</span>.props;</span><br><span class="line">        <span class="keyword">const</span> newDataList = <span class="keyword">this</span>.filter(dataList, <span class="number">18</span>)</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                ...</span><br><span class="line">                &#123;newDataList.map(<span class="function">(<span class="params">item, i</span>) =&gt;</span></span><br><span class="line">                    &lt;p key=&#123;i&#125;&gt;&#123;item.name&#125;:&#123;item.age&#125;岁&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">                )&#125;</span></span><br><span class="line"><span class="regexp">                ...</span></span><br><span class="line"><span class="regexp">            &lt;/</span>div&gt;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="memoize-one源码解析"><a href="#memoize-one源码解析" class="headerlink" title="memoize-one源码解析"></a>memoize-one源码解析</h4><p>memoize-one是采用闭包来缓存数据的<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">type EqualityFn = <span class="function">(<span class="params">a: mixed, b: mixed</span>) =&gt;</span> boolean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> simpleIsEqual: EqualityFn = (a: mixed, <span class="attr">b</span>: mixed): <span class="function"><span class="params">boolean</span> =&gt;</span> a === b;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> &lt;<span class="title">ResultFn</span>: (<span class="params">...Array&lt;any&gt;</span>) =&gt; <span class="title">mixed</span>&gt;(<span class="params">resultFn: ResultFn, isEqual?: EqualityFn = simpleIsEqual</span>): <span class="title">ResultFn</span> </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> lastThis: mixed; <span class="comment">// 用来缓存上一次result函数对象</span></span><br><span class="line">  <span class="keyword">let</span> lastArgs: <span class="built_in">Array</span>&lt;mixed&gt; = []; <span class="comment">// 用来缓存上一次的传参</span></span><br><span class="line">  <span class="keyword">let</span> lastResult: mixed; <span class="comment">// 用来缓存上一次的结果</span></span><br><span class="line">  <span class="keyword">let</span> calledOnce: boolean = <span class="literal">false</span>; <span class="comment">// 是否之前调用过</span></span><br><span class="line">  <span class="comment">// 判断两次调用的时候的参数是否相等</span></span><br><span class="line">  <span class="comment">// 这里的 `isEqual` 是一个抽象函数，用来判断两个值是否相等</span></span><br><span class="line">  <span class="keyword">const</span> isNewArgEqualToLast = (newArg: mixed, <span class="attr">index</span>: number): <span class="function"><span class="params">boolean</span> =&gt;</span> isEqual(newArg, lastArgs[index]);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> result = <span class="function"><span class="keyword">function</span> (<span class="params">...newArgs: Array&lt;mixed&gt;</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (calledOnce &amp;&amp;</span><br><span class="line">      lastThis === <span class="keyword">this</span> &amp;&amp;</span><br><span class="line">      newArgs.length === lastArgs.length &amp;&amp;</span><br><span class="line">      newArgs.every(isNewArgEqualToLast)) &#123;</span><br><span class="line">      <span class="comment">// 返回之前的结果</span></span><br><span class="line">      <span class="keyword">return</span> lastResult;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    calledOnce = <span class="literal">true</span>; <span class="comment">// 标记已经调用过</span></span><br><span class="line">    lastThis = <span class="keyword">this</span>; <span class="comment">// 重新缓存result对象</span></span><br><span class="line">    lastArgs = newArgs; <span class="comment">// 重新缓存参数</span></span><br><span class="line">    lastResult = resultFn.apply(<span class="keyword">this</span>, newArgs); <span class="comment">// 重新缓存结果</span></span><br><span class="line">    <span class="keyword">return</span> lastResult; <span class="comment">// 返回新的结果</span></span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 返回闭包函数</span></span><br><span class="line">  <span class="keyword">return</span> (result: any);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="关于isEqual函数（memoize-one推荐使用loadsh-isEqual）"><a href="#关于isEqual函数（memoize-one推荐使用loadsh-isEqual）" class="headerlink" title="关于isEqual函数（memoize-one推荐使用loadsh.isEqual）"></a>关于isEqual函数（memoize-one推荐使用loadsh.isEqual）</h4><p>一般两个对象比较是否相等，我们不能用===或者==来处理，memoize-one允许用户自定义传入判断是否相等的函数，比如我们可以使用lodash的isEqual来判断两次参数是否相等<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> memoizeOne <span class="keyword">from</span> <span class="string">'memoize-one'</span>;</span><br><span class="line"><span class="keyword">import</span> deepEqual <span class="keyword">from</span> <span class="string">'lodash.isEqual'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> identity = <span class="function"><span class="params">x</span> =&gt;</span> x;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> defaultMemoization = memoizeOne(identity);</span><br><span class="line"><span class="keyword">const</span> customMemoization = memoizeOne(identity, deepEqual);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> result1 = defaultMemoization(&#123;<span class="attr">foo</span>: <span class="string">'bar'</span>&#125;);</span><br><span class="line"><span class="keyword">const</span> result2 = defaultMemoization(&#123;<span class="attr">foo</span>: <span class="string">'bar'</span>&#125;);</span><br><span class="line"></span><br><span class="line">result1 === result2 <span class="comment">// false - 索引不同</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> result3 = customMemoization(&#123;<span class="attr">foo</span>: <span class="string">'bar'</span>&#125;);</span><br><span class="line"><span class="keyword">const</span> result4 = customMemoization(&#123;<span class="attr">foo</span>: <span class="string">'bar'</span>&#125;);</span><br><span class="line"></span><br><span class="line">result3 === result4 <span class="comment">// true - 参数通过lodash.isEqual判断是相等的</span></span><br></pre></td></tr></table></figure></p><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://github.com/alexreardon/memoize-one" target="_blank" rel="noopener">https://github.com/alexreardon/memoize-one</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;为什么要使用记忆性技术？&quot;&gt;&lt;a href=&quot;#为什么要使用记忆性技术？&quot; class=&quot;headerlink&quot; title=&quot;为什么要使用记忆性技术？&quot;&gt;&lt;/a&gt;为什么要使用记忆性技术？&lt;/h4&gt;&lt;p&gt;使用React开发的时候，我们请求服务器拿回来一个复杂的数据
      
    
    </summary>
    
      <category term="React" scheme="http://yoursite.com/categories/React/"/>
    
    
      <category term="React" scheme="http://yoursite.com/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>Webpack-公共组件引用路径简化</title>
    <link href="http://yoursite.com/2018/06/15/webpack%E5%B0%8F%E6%8A%80%E5%B7%A7-%E5%85%AC%E5%85%B1%E7%BB%84%E4%BB%B6%E5%BC%95%E7%94%A8%E8%B7%AF%E5%BE%84%E7%AE%80%E5%8C%96/"/>
    <id>http://yoursite.com/2018/06/15/webpack小技巧-公共组件引用路径简化/</id>
    <published>2018-06-15T06:02:10.000Z</published>
    <updated>2018-09-29T09:52:27.393Z</updated>
    
    <content type="html"><![CDATA[<p>日常开发中，我们会常常把一些功能提取出来，包装成一个公共模块或者组件，供不同地方使用，但是随着项目不断变大，项目目录不断变深，我们引用公共组件的路径越来越长！</p><p>例如：引用一个公共模块<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Menu <span class="keyword">from</span> <span class="string">'../../../../../components/Menu'</span>; <span class="comment">// 这里路径太深，很容易写错</span></span><br></pre></td></tr></table></figure></p><p><strong>我们该怎么优化尼？</strong></p><h4 id="解决方案1：使用webpack的resolve-alias属性"><a href="#解决方案1：使用webpack的resolve-alias属性" class="headerlink" title="解决方案1：使用webpack的resolve.alias属性"></a>解决方案1：使用webpack的<a href="https://webpack.js.org/configuration/resolve/" target="_blank" rel="noopener">resolve.alias</a>属性</h4><p>先配置webpack<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    ...</span><br><span class="line">    resolve: &#123;</span><br><span class="line">        alias: &#123;</span><br><span class="line">            <span class="string">"@commModule"</span>: path.resolve(__dirname, <span class="string">"src/components/"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>引用Menu模块<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Menu <span class="keyword">from</span> <span class="string">'@commModule/Menu'</span>;</span><br></pre></td></tr></table></figure></p><h4 id="解决方案2：babel-plugin-module-resolver"><a href="#解决方案2：babel-plugin-module-resolver" class="headerlink" title="解决方案2：babel-plugin-module-resolver"></a>解决方案2：<a href="https://github.com/tleunen/babel-plugin-module-resolver" target="_blank" rel="noopener">babel-plugin-module-resolver</a></h4><p>配置.babelrc<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"plugins"</span>: [</span><br><span class="line">        [<span class="string">"module-resolver"</span>, &#123;</span><br><span class="line">            <span class="string">"alias"</span>: &#123;</span><br><span class="line">                <span class="string">"@commMdule"</span>: <span class="string">"./src/components"</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;]</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>引用Menu模块<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Menu <span class="keyword">from</span> <span class="string">'@commModule/Menu'</span>;</span><br></pre></td></tr></table></figure></p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>或许这只是一个小优化，但是在实际场景中，能够大大的降低我们的维护成本，提高我们的生产效率！</p><h4 id="遗憾"><a href="#遗憾" class="headerlink" title="遗憾"></a>遗憾</h4><p>引用路径是简化了，但是VsCode不能快捷找到文件了</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;日常开发中，我们会常常把一些功能提取出来，包装成一个公共模块或者组件，供不同地方使用，但是随着项目不断变大，项目目录不断变深，我们引用公共组件的路径越来越长！&lt;/p&gt;
&lt;p&gt;例如：引用一个公共模块&lt;br&gt;&lt;figure class=&quot;highlight javascript
      
    
    </summary>
    
      <category term="Webpack" scheme="http://yoursite.com/categories/Webpack/"/>
    
    
      <category term="Webpack" scheme="http://yoursite.com/tags/Webpack/"/>
    
  </entry>
  
</feed>
